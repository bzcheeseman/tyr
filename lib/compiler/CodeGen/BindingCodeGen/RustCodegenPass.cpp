//
// Created by Aman LaChapelle on 2019-03-23.
//
// tyr
// Copyright (c) 2019 Aman LaChapelle
// Full license at tyr/LICENSE.txt
//

/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */

#include "RustCodegenPass.hpp"
#include "CCodegenPass.hpp"
#include "Module.hpp"

#include <llvm/Support/FileSystem.h>
#include <llvm/Support/Path.h>
#include <llvm/Support/raw_ostream.h>

tyr::pass::RustCodegenPass::RustCodegenPass(const std::string &OutputDir,
                                            uint32_t RTOptions)
    : m_output_dir_(OutputDir), m_rt_options_(RTOptions) {}

std::string tyr::pass::RustCodegenPass::getName() { return "RustCodegenPass"; }

bool tyr::pass::RustCodegenPass::runOnModule(tyr::Module &m) {
  CCodegenPass cCodegenPass(m_output_dir_, m_rt_options_);

  // Rust depends on the C header generated by the C codegen pass
  if (!cCodegenPass.runOnModule(m)) {
    llvm::errs()
        << "Failed to generate the C Header required by rust bindgen\n";
    return false;
  }

  // Need the full path to the C header
  llvm::SmallVector<char, 100> CHeaderPath{m_output_dir_.begin(),
                                           m_output_dir_.end()};
  llvm::sys::path::append(CHeaderPath,
                          std::string(m.getModule()->getName()) + ".h");
  llvm::sys::fs::make_absolute(CHeaderPath);
  const std::string CHeaderName{CHeaderPath.begin(), CHeaderPath.end()};

  // Need the full path to the C header
  llvm::SmallVector<char, 100> ObjectPath{m_output_dir_.begin(),
                                          m_output_dir_.end()};
  llvm::sys::path::append(ObjectPath,
                          std::string(m.getModule()->getName()) + ".o");
  llvm::sys::fs::make_absolute(ObjectPath);
  const std::string ObjectPathName{ObjectPath.begin(), ObjectPath.end()};

  // Then create the rust bindings
  const std::string RustBindingName =
      std::string(m.getModule()->getName()) + "_bindings.rs";
  const std::string RustBuildName =
      "build_" + std::string(m.getModule()->getName()) + "_bindings.rs";

  // Set up the file we're writing to
  llvm::SmallVector<char, 100> path{m_output_dir_.begin(), m_output_dir_.end()};
  llvm::sys::path::append(path, RustBuildName);
  llvm::sys::fs::make_absolute(path);
  const std::string Filename{path.begin(), path.end()};
  std::error_code EC;
  llvm::raw_fd_ostream out(Filename, EC, llvm::sys::fs::F_None);

  const std::string RustBuildFunctionName = "build_bindings";

  out << "extern crate bindgen;\n"
         "\n"
         "use std::env;\n"
         "use std::path::PathBuf;\n"
         "\n"
         "pub fn ";
  out << RustBuildFunctionName << "() {\n"
      << "    println!(\"cargo:rustc-link-lib=" << m.getModule()->getName()
      << "\");\n"
      << "    let bindings = bindgen::Builder::default()\n"
         "        .header(\""
      << CHeaderName << "\")\n"
      << "        .generate()\n"
         "        .expect(\"Unable to generate bindings\");\n"
         "\n"
         "    let out_path = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n"
         "    bindings\n"
         "        .write_to_file(out_path.join(\""
      << RustBindingName
      << "\"))\n"
         "        .expect(\"Couldn't write bindings!\");\n"
         "}";
  out.flush();
  out.close();

  return true;
}

tyr::ir::Pass::Ptr
tyr::pass::createRustCodegenPass(const std::string &OutputDir,
                                 uint32_t RTOptions) {
  return llvm::make_unique<tyr::pass::RustCodegenPass>(OutputDir, RTOptions);
}
