//
// Created by Aman LaChapelle on 12/1/18.
//
// tyr
// Copyright (c) 2018 Aman LaChapelle
// Full license at tyr/LICENSE.txt
//

/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */

#include "C.hpp"

#include <llvm/IR/Function.h>

void tyr::C::setupOpaqueTypes(llvm::ArrayRef<llvm::StructType *> StructTys) {
  for (const auto &s : StructTys) {
    // It's something like a file pointer or something
    if (s->getName().startswith("struct.")) {
      continue;
    }

    std::string struct_typename = s->getName();
    struct_typename += "_ptr";

    m_struct_ptr_typenames_[s->getName()] = struct_typename;
  }
}

std::string tyr::C::getFunctionProto(const llvm::Function &f) {

  std::string out{};
  llvm::raw_string_ostream rso(out);

  // Get the return type
  llvm::Type *RetTy = f.getReturnType();

  // Get the argument types
  std::vector<llvm::Type *> Args{};
  for (const auto &arg : f.args()) {
    Args.push_back(arg.getType());
  }

  // C style functions are ret_ty name(arg0, arg1, ...)
  rso << convertType(RetTy);
  rso << " " << f.getName() << "(";
  if (!Args.empty()) {
    for (auto arg_iter = Args.begin(), end = --Args.end(); arg_iter != end;
         ++arg_iter) {
      rso << convertType(*arg_iter);
      rso << ", ";
    }
    rso << convertType(*Args.rbegin());
  }
  rso << ");\n";

  return rso.str();
}

std::string tyr::C::convertType(const llvm::Type *t) {
  switch (t->getTypeID()) {
  case llvm::Type::VoidTyID:
    return "void";
  case llvm::Type::FloatTyID:
    return "float";
  case llvm::Type::DoubleTyID:
    return "double";
  case llvm::Type::IntegerTyID: {
    switch (t->getIntegerBitWidth()) {
    case 1:
      return "bool";
    case 8:
      return "uint8_t";
    case 16:
      return "uint16_t";
    case 32:
      return "uint32_t";
    case 64:
      return "uint64_t";
    default:
      return "";
    }
  }
  case llvm::Type::PointerTyID: {
    if (t->getPointerElementType()->isStructTy()) {
      return m_struct_ptr_typenames_.at(
          t->getPointerElementType()->getStructName());
    }
    return convertType(t->getPointerElementType()) + " *";
  }
  default:
    return "";
  }
}

std::string tyr::C::getHeader() {
  std::string out{};

  out += "#pragma once\n";
  out += "/*\n"
         "  "
         "====================================================================="
         "=====\n"
         "  ============= Autogenerated by the tyr compiler, DO NOT EDIT "
         "=============\n"
         "  "
         "====================================================================="
         "=====\n"
         "*/\n\n";

  out += "// Module: " + m_module_name_ + "\n";
  out += "// Objname: " + m_module_name_ + ".o\n\n";

  out += "#ifdef __cplusplus\n"
         "extern \"C\" {\n"
         "#endif // __cplusplus\n\n";

  out += "#include <stdbool.h>\n"
         "#include <stdint.h>\n"
         "#include <tyr/rt/FileHelper.h>\n"
         "\n";

  return out;
}

std::string tyr::C::getFooter() {
  return "\n\n#ifdef __cplusplus\n"
         "}\n"
         "#endif // __cplusplus\n";
}

std::string tyr::C::getTypeWrappers() {
  std::string out{};

  out += "// Struct typedefs\n";
  for (auto &entry : m_struct_ptr_typenames_) {
    out += "typedef void *" + entry.second + ";\n";
  }
  out += "\n// Begin Functions\n";

  return out;
}
