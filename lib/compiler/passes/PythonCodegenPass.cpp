//
// Created by Aman LaChapelle on 2019-02-12.
//
// tyr
// Copyright (c) 2019 Aman LaChapelle
// Full license at tyr/LICENSE.txt
//

/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */


#include "BindingCodegenPass.hpp"

#include "IR.hpp"

namespace {
  llvm::raw_ostream &operator<<(llvm::raw_ostream &out, const llvm::Type *Ty) {
    if (Ty->isIntegerTy()) {
      switch (Ty->getIntegerBitWidth()) {
        case 1:
          out << "ctypes.c_bool"; break;
        case 8:
          out << "ctypes.c_uint8"; break;
        case 16:
          out << "ctypes.c_uint16"; break;
        case 32:
          out << "ctypes.c_uint32"; break;
        case 64:
          out << "ctypes.c_uintt64"; break;
        default:{
          break;
        }
      }
    } else if (Ty->isFloatingPointTy()) {
      if (Ty->isFloatTy()) {
        out << "ctypes.c_float";
      } else if (Ty->isDoubleTy()) {
        out << "ctypes.c_double";
      }
    } else if (Ty->isPointerTy() && Ty->getPointerElementType()->isStructTy()) {
      out << "ctypes.c_void_p";
    } else if (Ty->isPointerTy()) {
      return out << "ctypes.POINTER(" << Ty->getPointerElementType() << ")";
    }

    return out;
  }

  std::string generateArgsList(llvm::ArrayRef<std::string> argNames) {
    std::string out {};
    for (auto argIter = argNames.begin(), end = argNames.end()-1; argIter != end; ++argIter) {
      out += *argIter + ", ";
    }
    out += *argNames.rbegin();
    return out;
  }
}

tyr::pass::PythonCodegenPass::PythonCodegenPass(llvm::raw_ostream &out, std::string soName) : BindingCodegenPass(out), m_so_name_(std::move(soName)) {
  m_out_ << "\"\"\"\n"
            "====================================================================="
            "=====\n"
            "============= Autogenerated by the tyr compiler, DO NOT EDIT "
            "=============\n"
            "====================================================================="
            "=====\n"
            "\"\"\"\n";

  m_out_ << "import os\n"
            "import numpy as np\n"
            "tyrlib = ctypes.cdll.LoadLibrary(os.getenv(\"TYR_COMPILED_SO_PATH\", "
            "os.path.join(os.path.dirname(os.path.realpath(__file__)), \"libtyr_" +
            m_so_name_ +
            ".so\")))"
            "\n\n";
}

std::string tyr::pass::PythonCodegenPass::getName() {
  return "PythonCodegenPass";
}

bool tyr::pass::PythonCodegenPass::runOnStruct(const tyr::ir::Struct &s) {

  m_out_ << "\n\n";
  llvm::SmallVector<ir::Field *, 8> ConstructorFields;
  for (auto &f : s.getFields()) {
    if (f->isCount) {
      continue;
    }

    std::string getterFuncName = "get_" + s.getName() + "_" + f->name;
    m_out_ << "tyrlib." << getterFuncName << ".restype = ctypes.c_bool\n";
    m_out_ << "tyrlib." << getterFuncName << ".argtypes = [" << s.getType()->getPointerTo(0) << ", " << f->type->getPointerTo(0) << "]\n\n\n";

    std::string getterFuncArgs = generateArgsList({"struct_ptr", f->name});
    m_out_ << "def " << getterFuncName << "(" << getterFuncArgs << "):\n";
    m_out_ << "\treturn tyrlib." << getterFuncName << "(" << getterFuncArgs << ")\n\n\n";


    std::string setterFuncName = "set_" + s.getName() + "_" + f->name;
    if (f->mut) {
      if (f->isRepeated) {
        m_out_ << "tyrlib." << setterFuncName << ".restype = ctypes.c_bool\n";
        m_out_ << "tyrlib." << setterFuncName << ".argtypes = [" << s.getType()->getPointerTo(0) << ", " << f->type << ", " << f->countField->type << "]\n\n\n";

        std::string setterFuncArgs = generateArgsList({"struct_ptr", f->name, f->countField->name});
        m_out_ << "def " << getterFuncName << "(" << getterFuncArgs << "):\n";
        m_out_ << "\treturn tyrlib." << getterFuncName << "(" << getterFuncArgs << ")\n\n\n";

      } else {
        m_out_ << "tyrlib." << setterFuncName << ".restype = ctypes.c_bool\n";
        m_out_ << "tyrlib." << setterFuncName << ".argtypes = [" << s.getType()->getPointerTo(0) << ", " << f->type << "]\n\n\n";

        std::string setterFuncArgs = generateArgsList({"struct_ptr", f->name});
        m_out_ << "def " << getterFuncName << "(" << getterFuncArgs << "):\n";
        m_out_ << "\treturn tyrlib." << getterFuncName << "(" << getterFuncArgs << ")\n\n\n";
      }
    }

    if (f->isRepeated) {
      m_out_ << "tyrlib." << getterFuncName << "_item.restype = ctypes.c_bool\n";
      m_out_ << "tyrlib." << getterFuncName << "_item.argtypes = [" << s.getType()->getPointerTo(0) << ", ctypes.c_ulonglong, " << f->type << "]\n\n";

      std::string itemGetterFuncArgs = generateArgsList({"struct_ptr", "idx", f->name + "_item"});
      m_out_ << "def " << getterFuncName << "_item(" << itemGetterFuncArgs << "):\n";
      m_out_ << "\treturn tyrlib." << getterFuncName << "_item(" << itemGetterFuncArgs << ")\n\n\n";

      if (f->mut) {
        m_out_ << "tyrlib." << setterFuncName << "_item.restype = ctypes.c_bool\n";
        m_out_ << "tyrlib." << setterFuncName << "_item.argtypes = [" << s.getType()->getPointerTo(0) << ", ctypes.c_ulonglong, " << f->type->getPointerElementType() << "]\n\n";

        std::string itemSetterFuncArgs = generateArgsList({"struct_ptr", "idx", f->name + "_item"});
        m_out_ << "def " << setterFuncName << "_item(" << itemSetterFuncArgs << "):\n";
        m_out_ << "\treturn tyrlib." << setterFuncName << "_item(" << itemSetterFuncArgs << ")\n\n\n";
      }

      m_out_ << "tyrlib." << getterFuncName << "_count.restype = ctypes.c_bool\n";
      m_out_ << "tyrlib." << getterFuncName << "_count.argtypes = [" << s.getType()->getPointerTo(0) << ", ctypes.POINTER(ctypes.c_ulonglong)]\n\n";

      std::string countGetterFuncArgs = generateArgsList({"struct_ptr", "count"});
      m_out_ << "def " << getterFuncName << "_count(" << countGetterFuncArgs << "):\n";
      m_out_ << "\treturn tyrlib." << getterFuncName << "_count(" << countGetterFuncArgs << ")\n\n\n";
    }

    if (!f->mut) {
      ConstructorFields.push_back(f.get());
    }
  }

  // Constructor
//  m_out_ << PtrName << " create_" << s.getName() << "(";
//  if (!ConstructorFields.empty()) {
//    for (auto cf = ConstructorFields.begin(), end = ConstructorFields.end() - 1; cf != end; ++cf) {
//      if ((*cf)->isRepeated) {
//        m_out_ << "uint64_t" << (*cf)->name << "_count, ";
//      }
//
//      m_out_ << (*cf)->type << (*cf)->name << ", ";
//    }
//    auto lastField = ConstructorFields.rbegin();
//    if ((*lastField)->isRepeated) {
//      m_out_ << "uint64_t " << (*lastField)->name << "_count, ";
//    }
//    m_out_ << (*lastField)->type << (*lastField)->name;
//  }
//  m_out_ << ");\n";
//
//  // Destructor
//  m_out_ << "void destroy_" << s.getName() << "(" << PtrName << " struct_ptr);\n";
//
//  // Serializer
//  m_out_ << "uint8_t *serialize_" << s.getName() << "(" << PtrName << " struct_ptr);\n";
//
//  // Deserializer
//  m_out_ << PtrName << " deserialize_" << s.getName() << "(uint8_t *serialized_struct);\n";

  return true;
}
