//
// Created by Aman LaChapelle on 2019-02-13.
//
// tyr
// Copyright (c) 2019 Aman LaChapelle
// Full license at tyr/LICENSE.txt
//

/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */

#include "BindingCodegenPass.hpp"

#include "IR.hpp"

namespace {
  llvm::raw_ostream &operator<<(llvm::raw_ostream &out, const llvm::Type *Ty) {
    if (Ty->isIntegerTy()) {
      switch (Ty->getIntegerBitWidth()) {
        case 1:
          out << "bool "; break;
        case 8:
          out << "uint8_t "; break;
        case 16:
          out << "uint16_t "; break;
        case 32:
          out << "uint32_t "; break;
        case 64:
          out << "uint64_t "; break;
        default:{
          break;
        }
      }
    } else if (Ty->isFloatingPointTy()) {
      if (Ty->isFloatTy()) {
        out << "float ";
      } else if (Ty->isDoubleTy()) {
        out << "double ";
      }
    } else if (Ty->isPointerTy() && Ty->getPointerElementType()->isStructTy()) {
      out << Ty->getPointerElementType()->getStructName() << "_ptr ";
    } else if (Ty->isPointerTy()) {
      return out << Ty->getPointerElementType() << "*";
    }

    return out;
  }
}

tyr::pass::CCodegenPass::CCodegenPass(llvm::raw_ostream &out) : BindingCodegenPass(out) {
  out << "#pragma once\n";
  out << "/*\n"
         "  "
         "====================================================================="
         "=====\n"
         "  ============= Autogenerated by the tyr compiler, DO NOT EDIT "
         "=============\n"
         "  "
         "====================================================================="
         "=====\n"
         "*/\n\n";

  out << "#include <stdbool.h>\n"
         "#include <stdint.h>\n";
  // Link runtime
  out << "#include <tyr/rt/FileHelper.h>\n";
  out << "\n";
}

std::string tyr::pass::CCodegenPass::getName() {
  return "CCodegenPass";
}

bool tyr::pass::CCodegenPass::runOnStruct(const tyr::ir::Struct &s) {
  m_out_ << "#ifdef __cplusplus\n"
            "extern \"C\" {\n"
            "#endif // __cplusplus\n\n";

  const std::string PtrName = s.getName() + "_ptr";

  // Get the typedef void pointer
  m_out_ << "typedef void *" << PtrName << ";";

  m_out_ << "\n\n";
  llvm::SmallVector<ir::Field *, 8> ConstructorFields;
  for (auto &f : s.getFields()) {
    if (f->isCount) {
      continue;
    }
    m_out_ << "bool get_" << s.getName() << "_" << f->name << "(" << PtrName << " struct_ptr, " << f->type->getPointerTo(0) << f->name << ");\n";

    if (f->mut) {
      if (f->isRepeated) {
        m_out_ << "bool set_" << s.getName() << "_" <<  f->name << "(" << PtrName << " struct_ptr, " << f->type << f->name << ", uint64_t " << f->name << "_count);\n";
      } else {
        m_out_ << "bool set_" << s.getName() << "_" <<  f->name << "(" << PtrName << " struct_ptr, " << f->type << f->name << ");\n";
      }
    }

    if (f->isRepeated) {
      m_out_ << "bool get_" << s.getName() << "_" <<  f->name << "_item(" << PtrName << " struct_ptr, uint64_t idx, " << f->type << f->name << "_item);\n";
      if (f->mut) {
        m_out_ << "bool set_" << s.getName() << "_" <<  f->name << "_item(" << PtrName << " struct_ptr, uint64_t idx, " << f->type->getPointerElementType() << f->name << "_item);\n";
      }
      m_out_ << "bool get_" << s.getName() << "_" <<  f->name << "_count(" << PtrName << " struct_ptr, uint64_t *count);\n";
    }

    if (!f->mut) {
      ConstructorFields.push_back(f.get());
    }
  }

  // Constructor
  m_out_ << PtrName << " create_" << s.getName() << "(";
  if (!ConstructorFields.empty()) {
    for (auto cf = ConstructorFields.begin(), end = ConstructorFields.end() - 1; cf != end; ++cf) {
      if ((*cf)->isRepeated) {
        m_out_ << "uint64_t" << (*cf)->name << "_count, ";
      }

      m_out_ << (*cf)->type << (*cf)->name << ", ";
    }
    auto lastField = ConstructorFields.rbegin();
    if ((*lastField)->isRepeated) {
      m_out_ << "uint64_t " << (*lastField)->name << "_count, ";
    }
    m_out_ << (*lastField)->type << (*lastField)->name;
  }
  m_out_ << ");\n";

  // Destructor
  m_out_ << "void destroy_" << s.getName() << "(" << PtrName << " struct_ptr);\n";

  // Serializer
  m_out_ << "uint8_t *serialize_" << s.getName() << "(" << PtrName << " struct_ptr);\n";

  // Deserializer
  m_out_ << PtrName << " deserialize_" << s.getName() << "(uint8_t *serialized_struct);\n";

  m_out_ << "\n\n#ifdef __cplusplus\n";
  m_out_ << "}\n";
  m_out_ << "#endif // __cplusplus\n\n";

  return true;
}
